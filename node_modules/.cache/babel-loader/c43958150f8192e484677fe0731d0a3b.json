{"ast":null,"code":"import _defineProperty from \"/Users/mascagli/Desktop/Hyperflix/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/mascagli/Desktop/Hyperflix/src/containers/Search.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useReducer, useEffect } from \"react\"; // import Header from \"./Header\";\n\nimport Movie from \"../components/movie/movie.js\";\nimport Search from \"../components/searchBar/searchBar.js\";\nconst MOVIE_API_URL = \"https://www.omdbapi.com/?s=man&apikey=4a3b711b\";\nconst initialState = {\n  loading: true,\n  movies: [],\n  errorMessage: null\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"SEARCH_MOVIES_REQUEST\":\n      return _objectSpread({}, state, {\n        loading: true,\n        errorMessage: null\n      });\n\n    case \"SEARCH_MOVIES_SUCCESS\":\n      return _objectSpread({}, state, {\n        loading: false,\n        movies: action.payload\n      });\n\n    case \"SEARCH_MOVIES_FAILURE\":\n      return _objectSpread({}, state, {\n        loading: false,\n        errorMessage: action.error\n      });\n\n    default:\n      return state;\n  }\n};\n\nconst SearchView = () => {\n  //   const [state, dispatch] = useReducer(reducer, initialState);\n  //   useEffect(() => {\n  //     fetch(MOVIE_API_URL)\n  //       .then(response => response.json())\n  //       .then(jsonResponse => {\n  //         dispatch({\n  //           type: \"SEARCH_MOVIES_SUCCESS\",\n  //           payload: jsonResponse.Search\n  //         });\n  //       });\n  //   }, []);\n  //   // you can add this to the onClick listener of the Header component\n  // //   const refreshPage = () => {\n  // //     window.location.reload();\n  // //   };\n  //   const search = searchValue => {\n  //     dispatch({\n  //       type: \"SEARCH_MOVIES_REQUEST\"\n  //     });\n  //     fetch(`https://www.omdbapi.com/?s=${searchValue}&apikey=4a3b711b`)\n  //       .then(response => response.json())\n  //       .then(jsonResponse => {\n  //         if (jsonResponse.Response === \"True\") {\n  //           dispatch({\n  //             type: \"SEARCH_MOVIES_SUCCESS\",\n  //             payload: jsonResponse.Search\n  //           });\n  //         } else {\n  //           dispatch({\n  //             type: \"SEARCH_MOVIES_FAILURE\",\n  //             error: jsonResponse.Error\n  //           });\n  //         }\n  //       });\n  //   };\n  //   const { movies, errorMessage, loading } = state;\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, \"HELLO\")) // <div className=\"SearchView\">\n  //   {/* <Header text=\"HOOKED\" /> */}\n  //   <Search search={search} />\n  //   <p className=\"SearchView-intro\">Sharing a few of our favourite movies</p>\n  //   <div className=\"movies\">\n  //     {loading && !errorMessage ? (\n  //       <img className=\"spinner\"  alt=\"Loading spinner\" />\n  //     ) : errorMessage ? (\n  //       <div className=\"errorMessage\">{errorMessage}</div>\n  //     ) : (\n  //       movies.map((movie, index) => (\n  //         <Movie key={`${index}-${movie.Title}`} movie={movie} />\n  //       ))\n  //     )}\n  //   </div>\n  // </div>\n  ;\n};\n\nexport default SearchView;","map":{"version":3,"sources":["/Users/mascagli/Desktop/Hyperflix/src/containers/Search.js"],"names":["React","useReducer","useEffect","Movie","Search","MOVIE_API_URL","initialState","loading","movies","errorMessage","reducer","state","action","type","payload","error","SearchView"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,QAA6C,OAA7C,C,CACA;;AACA,OAAOC,KAAP,MAAkB,8BAAlB;AACA,OAAOC,MAAP,MAAmB,sCAAnB;AAEA,MAAMC,aAAa,GAAG,gDAAtB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,IADU;AAEnBC,EAAAA,MAAM,EAAE,EAFW;AAGnBC,EAAAA,YAAY,EAAE;AAHK,CAArB;;AAMA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACjC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,uBAAL;AACE,+BACKF,KADL;AAEEJ,QAAAA,OAAO,EAAE,IAFX;AAGEE,QAAAA,YAAY,EAAE;AAHhB;;AAKF,SAAK,uBAAL;AACE,+BACKE,KADL;AAEEJ,QAAAA,OAAO,EAAE,KAFX;AAGEC,QAAAA,MAAM,EAAEI,MAAM,CAACE;AAHjB;;AAKF,SAAK,uBAAL;AACE,+BACKH,KADL;AAEEJ,QAAAA,OAAO,EAAE,KAFX;AAGEE,QAAAA,YAAY,EAAEG,MAAM,CAACG;AAHvB;;AAKF;AACE,aAAOJ,KAAP;AApBJ;AAsBD,CAvBD;;AAyBA,MAAMK,UAAU,GAAG,MAAM;AACzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEE,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAL,CADJ,CAEE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBF;AAmBD,CA9DD;;AAgEA,eAAeA,UAAf","sourcesContent":["import React, { useReducer, useEffect } from \"react\";\n// import Header from \"./Header\";\nimport Movie from \"../components/movie/movie.js\";\nimport Search from \"../components/searchBar/searchBar.js\";\n\nconst MOVIE_API_URL = \"https://www.omdbapi.com/?s=man&apikey=4a3b711b\";\n\nconst initialState = {\n  loading: true,\n  movies: [],\n  errorMessage: null\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"SEARCH_MOVIES_REQUEST\":\n      return {\n        ...state,\n        loading: true,\n        errorMessage: null\n      };\n    case \"SEARCH_MOVIES_SUCCESS\":\n      return {\n        ...state,\n        loading: false,\n        movies: action.payload\n      };\n    case \"SEARCH_MOVIES_FAILURE\":\n      return {\n        ...state,\n        loading: false,\n        errorMessage: action.error\n      };\n    default:\n      return state;\n  }\n};\n\nconst SearchView = () => {\n//   const [state, dispatch] = useReducer(reducer, initialState);\n\n//   useEffect(() => {\n//     fetch(MOVIE_API_URL)\n//       .then(response => response.json())\n//       .then(jsonResponse => {\n//         dispatch({\n//           type: \"SEARCH_MOVIES_SUCCESS\",\n//           payload: jsonResponse.Search\n//         });\n//       });\n//   }, []);\n\n//   // you can add this to the onClick listener of the Header component\n// //   const refreshPage = () => {\n// //     window.location.reload();\n// //   };\n\n//   const search = searchValue => {\n//     dispatch({\n//       type: \"SEARCH_MOVIES_REQUEST\"\n//     });\n\n//     fetch(`https://www.omdbapi.com/?s=${searchValue}&apikey=4a3b711b`)\n//       .then(response => response.json())\n//       .then(jsonResponse => {\n//         if (jsonResponse.Response === \"True\") {\n//           dispatch({\n//             type: \"SEARCH_MOVIES_SUCCESS\",\n//             payload: jsonResponse.Search\n//           });\n//         } else {\n//           dispatch({\n//             type: \"SEARCH_MOVIES_FAILURE\",\n//             error: jsonResponse.Error\n//           });\n//         }\n//       });\n//   };\n\n//   const { movies, errorMessage, loading } = state;\n\n  return (\n      <div><p>HELLO</p></div>\n    // <div className=\"SearchView\">\n    //   {/* <Header text=\"HOOKED\" /> */}\n    //   <Search search={search} />\n    //   <p className=\"SearchView-intro\">Sharing a few of our favourite movies</p>\n    //   <div className=\"movies\">\n    //     {loading && !errorMessage ? (\n    //       <img className=\"spinner\"  alt=\"Loading spinner\" />\n    //     ) : errorMessage ? (\n    //       <div className=\"errorMessage\">{errorMessage}</div>\n    //     ) : (\n    //       movies.map((movie, index) => (\n    //         <Movie key={`${index}-${movie.Title}`} movie={movie} />\n    //       ))\n    //     )}\n    //   </div>\n    // </div>\n  );\n};\n\nexport default SearchView;"]},"metadata":{},"sourceType":"module"}