{"ast":null,"code":"/**\n * Copyright (c) 2011-2014 Felix Gnass\n * Licensed under the MIT license\n * http://spin.js.org/\n *\n * Example:\n    var opts = {\n      lines: 12             // The number of lines to draw\n    , length: 7             // The length of each line\n    , width: 5              // The line thickness\n    , radius: 10            // The radius of the inner circle\n    , scale: 1.0            // Scales overall size of the spinner\n    , corners: 1            // Roundness (0..1)\n    , color: '#000'         // #rgb or #rrggbb\n    , opacity: 1/4          // Opacity of the lines\n    , rotate: 0             // Rotation offset\n    , direction: 1          // 1: clockwise, -1: counterclockwise\n    , speed: 1              // Rounds per second\n    , trail: 100            // Afterglow percentage\n    , fps: 20               // Frames per second when using setTimeout()\n    , zIndex: 2e9           // Use a high z-index by default\n    , className: 'spinner'  // CSS class to assign to the element\n    , top: '50%'            // center vertically\n    , left: '50%'           // center horizontally\n    , shadow: false         // Whether to render a shadow\n    , hwaccel: false        // Whether to use hardware acceleration (might be buggy)\n    , position: 'absolute'  // Element positioning\n    }\n    var target = document.getElementById('foo')\n    var spinner = new Spinner(opts).spin(target)\n */\n;\n\n(function (root, factory) {\n  /* CommonJS */\n  if (typeof module == 'object' && module.exports) module.exports = factory();\n  /* AMD module */\n  else if (typeof define == 'function' && define.amd) define(factory);\n    /* Browser global */\n    else root.Spinner = factory();\n})(this, function () {\n  \"use strict\";\n\n  var prefixes = ['webkit', 'Moz', 'ms', 'O']\n  /* Vendor prefixes */\n  ,\n      animations = {}\n  /* Animation rules keyed by their name */\n  ,\n      useCssAnimations\n  /* Whether to use CSS animations or setTimeout */\n  ,\n      sheet;\n  /* A stylesheet to hold the @keyframe or VML rules. */\n\n  /**\n   * Utility function to create elements. If no tag name is given,\n   * a DIV is created. Optionally properties can be passed.\n   */\n\n  function createEl(tag, prop) {\n    var el = document.createElement(tag || 'div'),\n        n;\n\n    for (n in prop) el[n] = prop[n];\n\n    return el;\n  }\n  /**\n   * Appends children and returns the parent.\n   */\n\n\n  function ins(parent\n  /* child1, child2, ...*/\n  ) {\n    for (var i = 1, n = arguments.length; i < n; i++) {\n      parent.appendChild(arguments[i]);\n    }\n\n    return parent;\n  }\n  /**\n   * Creates an opacity keyframe animation rule and returns its name.\n   * Since most mobile Webkits have timing issues with animation-delay,\n   * we create separate rules for each line/segment.\n   */\n\n\n  function addAnimation(alpha, trail, i, lines) {\n    var name = ['opacity', trail, ~~(alpha * 100), i, lines].join('-'),\n        start = 0.01 + i / lines * 100,\n        z = Math.max(1 - (1 - alpha) / trail * (100 - start), alpha),\n        prefix = useCssAnimations.substring(0, useCssAnimations.indexOf('Animation')).toLowerCase(),\n        pre = prefix && '-' + prefix + '-' || '';\n\n    if (!animations[name]) {\n      sheet.insertRule('@' + pre + 'keyframes ' + name + '{' + '0%{opacity:' + z + '}' + start + '%{opacity:' + alpha + '}' + (start + 0.01) + '%{opacity:1}' + (start + trail) % 100 + '%{opacity:' + alpha + '}' + '100%{opacity:' + z + '}' + '}', sheet.cssRules.length);\n      animations[name] = 1;\n    }\n\n    return name;\n  }\n  /**\n   * Tries various vendor prefixes and returns the first supported property.\n   */\n\n\n  function vendor(el, prop) {\n    var s = el.style,\n        pp,\n        i;\n    prop = prop.charAt(0).toUpperCase() + prop.slice(1);\n    if (s[prop] !== undefined) return prop;\n\n    for (i = 0; i < prefixes.length; i++) {\n      pp = prefixes[i] + prop;\n      if (s[pp] !== undefined) return pp;\n    }\n  }\n  /**\n   * Sets multiple style properties at once.\n   */\n\n\n  function css(el, prop) {\n    for (var n in prop) {\n      el.style[vendor(el, n) || n] = prop[n];\n    }\n\n    return el;\n  }\n  /**\n   * Fills in default values.\n   */\n\n\n  function merge(obj) {\n    for (var i = 1; i < arguments.length; i++) {\n      var def = arguments[i];\n\n      for (var n in def) {\n        if (obj[n] === undefined) obj[n] = def[n];\n      }\n    }\n\n    return obj;\n  }\n  /**\n   * Returns the line color from the given string or array.\n   */\n\n\n  function getColor(color, idx) {\n    return typeof color == 'string' ? color : color[idx % color.length];\n  } // Built-in defaults\n\n\n  var defaults = {\n    lines: 12 // The number of lines to draw\n    ,\n    length: 7 // The length of each line\n    ,\n    width: 5 // The line thickness\n    ,\n    radius: 10 // The radius of the inner circle\n    ,\n    scale: 1.0 // Scales overall size of the spinner\n    ,\n    corners: 1 // Roundness (0..1)\n    ,\n    color: '#000' // #rgb or #rrggbb\n    ,\n    opacity: 1 / 4 // Opacity of the lines\n    ,\n    rotate: 0 // Rotation offset\n    ,\n    direction: 1 // 1: clockwise, -1: counterclockwise\n    ,\n    speed: 1 // Rounds per second\n    ,\n    trail: 100 // Afterglow percentage\n    ,\n    fps: 20 // Frames per second when using setTimeout()\n    ,\n    zIndex: 2e9 // Use a high z-index by default\n    ,\n    className: 'spinner' // CSS class to assign to the element\n    ,\n    top: '50%' // center vertically\n    ,\n    left: '50%' // center horizontally\n    ,\n    shadow: false // Whether to render a shadow\n    ,\n    hwaccel: false // Whether to use hardware acceleration (might be buggy)\n    ,\n    position: 'absolute' // Element positioning\n\n    /** The constructor */\n\n  };\n\n  function Spinner(o) {\n    this.opts = merge(o || {}, Spinner.defaults, defaults);\n  } // Global defaults that override the built-ins:\n\n\n  Spinner.defaults = {};\n  merge(Spinner.prototype, {\n    /**\n     * Adds the spinner to the given target element. If this instance is already\n     * spinning, it is automatically removed from its previous target b calling\n     * stop() internally.\n     */\n    spin: function (target) {\n      this.stop();\n      var self = this,\n          o = self.opts,\n          el = self.el = createEl(null, {\n        className: o.className\n      });\n      css(el, {\n        position: o.position,\n        width: 0,\n        zIndex: o.zIndex,\n        left: o.left,\n        top: o.top\n      });\n\n      if (target) {\n        target.insertBefore(el, target.firstChild || null);\n      }\n\n      el.setAttribute('role', 'progressbar');\n      self.lines(el, self.opts);\n\n      if (!useCssAnimations) {\n        // No CSS animation support, use setTimeout() instead\n        var i = 0,\n            start = (o.lines - 1) * (1 - o.direction) / 2,\n            alpha,\n            fps = o.fps,\n            f = fps / o.speed,\n            ostep = (1 - o.opacity) / (f * o.trail / 100),\n            astep = f / o.lines;\n\n        (function anim() {\n          i++;\n\n          for (var j = 0; j < o.lines; j++) {\n            alpha = Math.max(1 - (i + (o.lines - j) * astep) % f * ostep, o.opacity);\n            self.opacity(el, j * o.direction + start, alpha, o);\n          }\n\n          self.timeout = self.el && setTimeout(anim, ~~(1000 / fps));\n        })();\n      }\n\n      return self;\n    }\n    /**\n     * Stops and removes the Spinner.\n     */\n    ,\n    stop: function () {\n      var el = this.el;\n\n      if (el) {\n        clearTimeout(this.timeout);\n        if (el.parentNode) el.parentNode.removeChild(el);\n        this.el = undefined;\n      }\n\n      return this;\n    }\n    /**\n     * Internal method that draws the individual lines. Will be overwritten\n     * in VML fallback mode below.\n     */\n    ,\n    lines: function (el, o) {\n      var i = 0,\n          start = (o.lines - 1) * (1 - o.direction) / 2,\n          seg;\n\n      function fill(color, shadow) {\n        return css(createEl(), {\n          position: 'absolute',\n          width: o.scale * (o.length + o.width) + 'px',\n          height: o.scale * o.width + 'px',\n          background: color,\n          boxShadow: shadow,\n          transformOrigin: 'left',\n          transform: 'rotate(' + ~~(360 / o.lines * i + o.rotate) + 'deg) translate(' + o.scale * o.radius + 'px' + ',0)',\n          borderRadius: (o.corners * o.scale * o.width >> 1) + 'px'\n        });\n      }\n\n      for (; i < o.lines; i++) {\n        seg = css(createEl(), {\n          position: 'absolute',\n          top: 1 + ~(o.scale * o.width / 2) + 'px',\n          transform: o.hwaccel ? 'translate3d(0,0,0)' : '',\n          opacity: o.opacity,\n          animation: useCssAnimations && addAnimation(o.opacity, o.trail, start + i * o.direction, o.lines) + ' ' + 1 / o.speed + 's linear infinite'\n        });\n        if (o.shadow) ins(seg, css(fill('#000', '0 0 4px #000'), {\n          top: '2px'\n        }));\n        ins(el, ins(seg, fill(getColor(o.color, i), '0 0 1px rgba(0,0,0,.1)')));\n      }\n\n      return el;\n    }\n    /**\n     * Internal method that adjusts the opacity of a single line.\n     * Will be overwritten in VML fallback mode below.\n     */\n    ,\n    opacity: function (el, i, val) {\n      if (i < el.childNodes.length) el.childNodes[i].style.opacity = val;\n    }\n  });\n\n  function initVML() {\n    /* Utility function to create a VML tag */\n    function vml(tag, attr) {\n      return createEl('<' + tag + ' xmlns=\"urn:schemas-microsoft.com:vml\" class=\"spin-vml\">', attr);\n    } // No CSS transforms but VML support, add a CSS rule for VML elements:\n\n\n    sheet.addRule('.spin-vml', 'behavior:url(#default#VML)');\n\n    Spinner.prototype.lines = function (el, o) {\n      var r = o.scale * (o.length + o.width),\n          s = o.scale * 2 * r;\n\n      function grp() {\n        return css(vml('group', {\n          coordsize: s + ' ' + s,\n          coordorigin: -r + ' ' + -r\n        }), {\n          width: s,\n          height: s\n        });\n      }\n\n      var margin = -(o.width + o.length) * o.scale * 2 + 'px',\n          g = css(grp(), {\n        position: 'absolute',\n        top: margin,\n        left: margin\n      }),\n          i;\n\n      function seg(i, dx, filter) {\n        ins(g, ins(css(grp(), {\n          rotation: 360 / o.lines * i + 'deg',\n          left: ~~dx\n        }), ins(css(vml('roundrect', {\n          arcsize: o.corners\n        }), {\n          width: r,\n          height: o.scale * o.width,\n          left: o.scale * o.radius,\n          top: -o.scale * o.width >> 1,\n          filter: filter\n        }), vml('fill', {\n          color: getColor(o.color, i),\n          opacity: o.opacity\n        }), vml('stroke', {\n          opacity: 0\n        }) // transparent stroke to fix color bleeding upon opacity change\n        )));\n      }\n\n      if (o.shadow) for (i = 1; i <= o.lines; i++) {\n        seg(i, -2, 'progid:DXImageTransform.Microsoft.Blur(pixelradius=2,makeshadow=1,shadowopacity=.3)');\n      }\n\n      for (i = 1; i <= o.lines; i++) seg(i);\n\n      return ins(el, g);\n    };\n\n    Spinner.prototype.opacity = function (el, i, val, o) {\n      var c = el.firstChild;\n      o = o.shadow && o.lines || 0;\n\n      if (c && i + o < c.childNodes.length) {\n        c = c.childNodes[i + o];\n        c = c && c.firstChild;\n        c = c && c.firstChild;\n        if (c) c.opacity = val;\n      }\n    };\n  }\n\n  if (typeof document !== 'undefined') {\n    sheet = function () {\n      var el = createEl('style', {\n        type: 'text/css'\n      });\n      ins(document.getElementsByTagName('head')[0], el);\n      return el.sheet || el.styleSheet;\n    }();\n\n    var probe = css(createEl('group'), {\n      behavior: 'url(#default#VML)'\n    });\n    if (!vendor(probe, 'transform') && probe.adj) initVML();else useCssAnimations = vendor(probe, 'animation');\n  }\n\n  return Spinner;\n});","map":null,"metadata":{},"sourceType":"script"}