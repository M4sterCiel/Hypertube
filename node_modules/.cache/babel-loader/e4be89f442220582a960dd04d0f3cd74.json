{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _spin = require('spin.js');\n\nvar _spin2 = _interopRequireDefault(_spin);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar Spinner = function (_Component) {\n  _inherits(Spinner, _Component);\n\n  function Spinner() {\n    _classCallCheck(this, Spinner);\n\n    return _possibleConstructorReturn(this, (Spinner.__proto__ || Object.getPrototypeOf(Spinner)).apply(this, arguments));\n  }\n\n  _createClass(Spinner, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.updateSpinner();\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate() {\n      this.updateSpinner();\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      if (this.spinner) {\n        this.spinner.stop();\n        this.spinner = null;\n      }\n    }\n  }, {\n    key: 'updateSpinner',\n    value: function updateSpinner() {\n      var loaded = this.props.loaded;\n\n      if (!loaded && !this.spinner) {\n        this.spinner = new _spin2.default(this.props.config);\n        this.spinner.spin(this.refs.loader);\n      } else if (loaded && this.spinner) {\n        this.spinner.stop();\n        this.spinner = null;\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          loaded = _props.loaded,\n          className = _props.className;\n\n      if (loaded) {\n        return this.props.children ? _react.Children.only(this.props.children) : null;\n      }\n\n      return _react2.default.createElement('div', {\n        className: className,\n        ref: 'loader'\n      });\n    }\n  }]);\n\n  return Spinner;\n}(_react.Component);\n\nSpinner.propTypes = {\n  className: _propTypes2.default.string,\n  config: _propTypes2.default.object.isRequired,\n  loaded: _propTypes2.default.bool.isRequired,\n  children: _propTypes2.default.node\n};\nSpinner.defaultProps = {\n  config: {},\n  loaded: false,\n  className: 'loader'\n};\nexports.default = Spinner;","map":null,"metadata":{},"sourceType":"script"}